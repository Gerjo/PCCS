#!/bin/bash

##
# PCCS: Guerrilla Tactics dedicated server launcher and utilities.
#

#Not there on debian?
#source /etc/init.d/functions

PROJECTFOLDER="${HOME}/pccs/"
LOGFILE="${PROJECTFOLDER}dist/dedicated.out"
MASTERLOGFILE="${PROJECTFOLDER}dist/master.out"
BINFOLDER="${PROJECTFOLDER}dist/"
BIN="dedicated.run"
CENTRY="../sentry-guerrilla-tactics"
BINMASTER="masterserver.run"

logo() {
    echo "   _____ _____ _____ _____   "
    echo "  |  _  |     |     |   __|  "
    echo "  |   __|  ===|  ===|__   |  "
    echo "  |__|  |_____|_____|_____|  "
    echo "                             "
}

loadpid() {
    pid=`ps -eo pid,comm | grep "sentry-guerr" | awk '{ print $1 }'`
    PIDMASTER=`ps -eo pid,comm | grep "masterserver.ru" | awk '{ print $1 }'`
}

status() {
    loadpid
    echo "The sentry PID, if any: #${pid}."
    PIDBIN=`ps -eo pid,comm | grep "dedicated.run" | awk '{ print $1 }'`
    echo "The dedicated server PID, if any: #${PIDBIN}."
    echo "The master server PID, if any: #${PIDMASTER}."
}

stop() {
    loadpid
    if [ -n "$pid" ]; then
        echo "Killing sentry with PID #${pid}."
        kill -9 $pid
        sleep 1
        echo "killed."
    else
        echo "Sentry not running."
    fi

    PIDBIN=`ps -eo pid,comm | grep "dedicated.run" | awk '{ print $1 }'`
    if [ -n "${PIDBIN}" ]; then
        echo "Killing dedicated server with PID #${PIDBIN}."
        kill -9 ${PIDBIN}
        sleep 1
        echo "killed."
    else
        echo "Dedicated server not running."
    fi

    if [ -n "$PIDMASTER" ]; then
        echo "Killing master server with PID #${PIDMASTER}."
        kill -9 $PIDMASTER
        sleep 1
        echo "killed."
    else
        echo "Master server not running."
    fi

}

start() {
    loadpid

    if [ -n "${PIDMASTER}" ]; then
        echo "Master server is already running with PID #${PIDMASTER}."
    else
        echo "Master server not running, attempting to start it."
        cd ${BINFOLDER}
        nohup ${BINFOLDER}${BINMASTER} >> ${MASTERLOGFILE} 2>> ${MASTERLOGFILE} &
        sleep 1
    fi


    if [ -n "$pid" ]; then
        echo "Dedicated server is already running with PID #${pid}."
    else
        echo "Starting sentry, which will spawn the dedicated server..."
        cd ${BINFOLDER}
        nohup ${CENTRY} ${BINFOLDER}${BIN} >> ${LOGFILE} 2>> ${LOGFILE} &
        sleep 1

        status
    fi
}

log() {
    loadpid
    if [ -n "$pid" ]; then
        tail -f ${LOGFILE}
    else
        echo "Logs are only available if the server is running."
    fi
}

pull() {
    echo "Pulling ${PROJECTFOLDER}";
    cd ${PROJECTFOLDER} && git pull

    echo "Pulling ${PROJECTFOLDER}phantom";
    cd ${PROJECTFOLDER}phantom && git pull

    echo "Pulling ${PROJECTFOLDER}libyaxl";
    cd ${PROJECTFOLDER}libyaxl && git pull
}

rebuild() {
    cd ${PROJECTFOLDER}dedicatedserver
    make clean
    cd ${PROJECTFOLDER}masterserver
    make clean

    cd ${PROJECTFOLDER}dedicatedserver
    make
    cd ${PROJECTFOLDER}masterserver
    make
}

build() {
    cd ${PROJECTFOLDER}dedicatedserver
    make
    cd ${PROJECTFOLDER}masterserver
    make
}

run() {
    loadpid
    if [ -n "$pid" ]; then
        echo "Dedicated server already running. Kill it first via pccs stop."
    else
        cd ${BINFOLDER}
        ${CENTRY} ./${BIN}
    fi
}

logo

if [ "${EUID}" -eq 0 ]; then
    echo "It's unsafe to run this as root. You should know better. Aborting."
    exit 1
fi

for OPTION in "$@"
do
    case "${OPTION}" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        status)
            status
            ;;
        log)
            log
            ;;
        restart)
            stop
            start
            ;;
        rebuild)
            rebuild
            ;;
        run)
            run
            ;;
        build)
            build
            ;;
        pull)
            pull
            ;;
        all)
            pull
            build
            stop
            run
            ;;
        *)
            echo $"Usage: $0 {start|stop|restart|status|log|pull|run|rebuild|build|all}. Any combination of options is available."
    esac
    echo "---"
    echo ""
done

exit 0
